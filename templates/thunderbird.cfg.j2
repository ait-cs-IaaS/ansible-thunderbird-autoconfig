// Disable updater
lockPref('app.update.enabled', false);

// Disable update service (introduced in version 12)
lockPref('app.update.service.enabled', false);

// Enable extensions only inside Program Files
pref('extensions.autoDisableScopes', 11);

// disable ad for gandi.net and hover.com
pref('mail.provider.enabled', false);

// Don't show WhatsNew on first run of new version
pref('mailnews.start_page_override.mstone', 'ignore');
pref('mailnews.start_page.enabled', false);

// Don't show 'know your rights' on first run
pref('mail.rights.version', 1);
pref('mail.shell.checkDefaultClient', false);

// Don't ask to send aggregate health-data on second run
lockPref('toolkit.telemetry.rejected', true);
lockPref('toolkit.telemetry.prompted', 2);

// Don't send aggregate health-data
lockPref('toolkit.telemetry.enabled', false);

// Do not add undisclosed recipients to bcc only emails
pref('mail.compose.add_undisclosed_recipients', false);

// utility function to get certificate database
function getCertDB() {
  var certdb2 = Components.classes[
    '@mozilla.org/security/x509certdb;1'
  ].getService(Components.interfaces.nsIX509CertDB);
  try {
    certdb2 = Components.classes[
      '@mozilla.org/security/x509certdb;1'
    ].getService(Components.interfaces.nsIX509CertDB2);
  } catch (e) {}
  return certdb2;
}

// Add CA certs from provided strings
function addCertStrings(certStrings) {
  if (certStrings) {
    var certdb2 = getCertDB();
    for (var i = 0; i < certStrings.length; i++) {
      let certfile = certStrings[i].replace(/[\r\n]/g, '');
      let BEGIN_CERT = '-----BEGIN CERTIFICATE-----';
      let END_CERT = '-----END CERTIFICATE-----';
      let begin = certfile.indexOf(BEGIN_CERT);
      let end = certfile.indexOf(END_CERT);
      let cert = certfile.substring(begin + BEGIN_CERT.length, end);
      certdb2.addCertFromBase64(cert, 'C,C,C', '');
    }
  }
}

function registerLoginInfo(
  LoginManager,
  nsLoginInfo,
  hostname,
  formSubmitURL,
  httpRealm,
  username,
  password,
) {
  //check if login info already exists
  var logins = LoginManager.findLogins({}, hostname, formSubmitURL, httpRealm);
  for (var i = 0; i < logins.length; i++) {
    if (logins[i].username == username) {
      // update password if info exists
      if (logins[i].password != password) {
        var newLoginInfo = new nsLoginInfo(
          hostname,
          formSubmitURL,
          httpRealm,
          username,
          password,
          logins[i].username,
          logins[i].password,
        );
        LoginManager.modifyLogin(logins[i], newLoginInfo);
      }
      return;
    }
  }
  // if we made it this far there is no matching login info
  var newLoginInfo = new nsLoginInfo(
    hostname,
    formSubmitURL,
    httpRealm,
    username,
    password,
    '',
    '',
  );
  LoginManager.addLogin(newLoginInfo);
}

function addAccount(num, account) {

  // Define the account
  pref('mail.account.account' + num + '.server', 'server' + num);
  pref('mail.account.account' + num + '.identities', 'id' + num);

  // Define the server
  pref('mail.server.server' + num + '.hostname', account.retrievServer);
  pref('mail.server.server' + num + '.userName', account.user);
  pref('mail.server.server' + num + '.name', account.email);
  pref('mail.server.server' + num + '.type', 'imap');
  pref('mail.server.server' + num + '.port', 143);
  pref('mail.server.server' + num + '.socketType', 2);
  pref('mail.server.server' + num + '.authMethod', 3);
  pref("mail.server.server" + num + ".check_time", 1);
  pref("mail.server.server" + num + ".force_select", "no-auto");
  pref("mail.server.server" + num + ".login_at_startup", true);
  pref('mail.server.server' + num + '.directory-rel', '[ProfD]ImapMail/' + account.retrievServer);

  // Define the identity
  pref('mail.identity.id' + num + '.fullName', account.user);
  pref('mail.identity.id' + num + '.useremail', account.email);
  pref('mail.identity.id' + num + '.smtpServer', 'smtp' + num);
  pref('mail.identity.id' + num + '.doBcc', false);
  pref('mail.identity.id' + num + '.archiveEnabled', false);
  pref('mail.identity.id' + num + '.draft_folder', 'imap://' + account.user + '@' + account.retrievServer + '/Drafts');
  pref('mail.identity.id' + num + '.fccFolder', 'imap://' + account.user + '@' + account.retrievServer + '/Sent');
  pref('mail.identity.id' + num + '.stationeryFolder', 'imap://' + account.user + '@' + account.retrievServer + '/Templates');
  pref('mail.identity.id' + num + '.sig_bottom', false);

  // Define the SMTP server
  pref('mail.smtpserver.smtp' + num + '.username', account.user);
  pref('mail.smtpserver.smtp' + num + '.hostname', account.smtpServer);
  pref('mail.smtpserver.smtp' + num + '.description', account.email + ' SMTP');
  pref('mail.smtpserver.smtp' + num + '.port', 587);
  pref('mail.smtpserver.smtp' + num + '.authMethod', 3);
  pref('mail.smtpserver.smtp' + num + '.useSecAuth', true);
  pref('mail.smtpserver.smtp' + num + '.try_ssl', 2);

  // Set default identities and accounts
  pref('mail.accountmanager.localfoldersserver', 'server' + num);

  try {
    // Setup password for the account
    const Cc = Components.classes;
    const Ci = Components.interfaces;
    // get login manager
    const LoginManager = Cc['@mozilla.org/login-manager;1'].getService(
      Ci.nsILoginManager,
    );
    var nsLoginInfo = new Components.Constructor(
      '@mozilla.org/login-manager/loginInfo;1',
      Components.interfaces.nsILoginInfo,
      'init',
    );
    // create new imap login
    registerLoginInfo(
      LoginManager,
      nsLoginInfo,
      'imap://' + account.retrievServer,
      null,
      'imap://' + account.retrievServer,
      account.user,
      account.password,
      '',
      '',
    );
    // create new smtp login
    registerLoginInfo(
      LoginManager,
      nsLoginInfo,
      'smtp://' + account.smtpServer,
      null,
      'smtp://' + account.smtpServer,
      account.user,
      account.password,
      '',
      '',
    );
  } catch (ex) {
    displayError('LoginManager', ex);
  }
}

addCertStrings([
  {% for ca_cert in thunderbird_trusted_certs %}
  `{{ lookup('file', ca_cert) }}`,
  {% endfor %}
]);

var mail = null;

{% if thunderbird_config is defined %}
  try {
    mail = JSON.parse('{{ thunderbird_config | tojson }}');
  } catch (ex) {
    displayError("JSON.parse", ex);
  }
{% endif %}

if (!getPref('ait.startup.done')) {
  var smtpservers = [];
  var accounts = [];

  if (mail) {
    for (var i = 1; i <= mail.length; i++) {
      addAccount(i, mail[i - 1]);

      pref('mail.smtp.defaultserver', 'smtp1');
      pref('mail.accountmanager.defaultaccount', 'account1');

      accounts.push('account' + i);
      smtpservers.push('smtp' + i);
    }

    if (smtpservers != '') pref('mail.smtpservers', smtpservers.join(','));
    if (accounts != '')
      pref('mail.accountmanager.accounts', accounts.join(','));
  }
}

pref('ait.startup.done', true);

// TODO: Add contacts
// TODO: Add SMIME support
