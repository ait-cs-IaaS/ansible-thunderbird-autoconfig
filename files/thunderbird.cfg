// preferences
// -----------------------------------------------------------------------------

// https://github.com/interlegis/puppet-thunderbird/blob/master/templates/thunderbird.cfg.erb
// --- recommended settings ---
// Disable updater
lockPref("app.update.enabled", false);

// Disable update service (introduced in version 12)
lockPref("app.update.service.enabled", false);

// Enable extensions only inside Program Files
pref("extensions.autoDisableScopes", 11);

// --- optional settings ---

// disable ad for gandi.net and hover.com
pref("mail.provider.enabled", false);

// don't waste vertical space for useless tab
// pref ("mail.tabs.autoHide", true);

// Don't show WhatsNew on first run of new version
pref("mailnews.start_page_override.mstone", "ignore");

// Don't show 'know your rights' on first run
pref("mail.rights.version", 1);
pref("mail.shell.checkDefaultClient", false)

// Don't ask to send aggregate health-data on second run
lockPref("toolkit.telemetry.rejected", true);
lockPref("toolkit.telemetry.prompted", 2);

// Don't send aggregate health-data
lockPref("toolkit.telemetry.enabled", false);

// Do not add undisclosed recipients to bcc only emails
pref("mail.compose.add_undisclosed_recipients", false);

// Don't send performance statistics and hardware configuration
//pref("dom.enable_performance", true);

// -----------------------------------------------------------------------------

try {
  // parse all our json variables

  // check for mail lists
  var mailLists = null;
  if (getenv("MAIL_LISTS_JSON")) {
    try {
      mailLists = JSON.parse(getenv("MAIL_LISTS_JSON"));
    } catch (ex) {
      displayError("JSON.parse", ex);
    }
  }

  // check for contacts
  var contacts = null;
  if (getenv("MAIL_CONTACTS_JSON")) {
    try {
      contacts = JSON.parse(getenv("MAIL_CONTACTS_JSON"));
    } catch (ex) {
      displayError("JSON.parse", ex);
    }
  }

  // check for accounts
  // mail will hold all configuration info in form of a dictonary
  var mail = null;
  // first check for json then check for MAIL_* and convert them to dict data
  if (getenv("MAIL_JSON")) {
    try {
      mail = JSON.parse(getenv("MAIL_JSON"));
    } catch (ex) {
      displayError("JSON.parse", ex);
    }
  } else if ((getenv("MAIL_IMAP") || getenv("MAIL_POP3")) && getenv("MAIL_ADDRESS") && getenv("MAIL_SMTP")) {
    // transform MAIL_* data to dictionary
    var account = {};
    account.email = getenv("MAIL_ADDRESS");
    account.smtpServer = getenv("MAIL_SMTP");
    account.smtpPort = parseInt(getenv("MAIL_SMTP_PORT")) || 587;
    account.retrievServer = getenv("MAIL_IMAP");
    account.retrievPort = parseInt(getenv("MAIL_IMAP_PORT")) || 143;
    account.mode = "imap";
    account.name = getenv("MAIL_FULL_NAME") || null;
    account.user = getenv("MAIL_USER") || account.email;
    // possible values 0: no encryption , 2: startssl, 3: ssl
    /**
     * IMAP/POP3/SMTP socket types
     *      0: no encryption
     *      2: STARTSSL
     *      3: SSL/TLS
     *
     * IMAP/POP3/SMTP AUTH_METHOD values:
     *      1: no authentication (smtp only)
     *      3: normal password
     *      4: encrypted password
     *      5: Kerberos/GSSAPI
     *      6: NTLM
     *      7: TLS Certificate
     *      8: OAuth2
     *
     */
    account.retrievSock = parseInt(getenv("MAIL_IMAP_SOCK")) || parseInt(getenv("MAIL_SOCK")) || 2;
    account.retrievAuth = parseInt(getenv("MAIL_IMAP_AUTH")) || parseInt(getenv("MAIL_AUTH")) || 3;
    account.smtpSock = parseInt(getenv("MAIL_SMTP_SOCK")) || parseInt(getenv("MAIL_SOCK")) || 2;
    account.smtpAuth = parseInt(getenv("MAIL_SMTP_AUTH")) || parseInt(getenv("MAIL_AUTH")) || 3;
    if ((getenv("MAIL_MODE") && getenv("MAIL_MODE") == "POP3") || !getenv("MAIL_IMAP")) {
      account.retrievServer = getenv("MAIL_POP3");
      account.retrievPort = parseInt(getenv("MAIL_POP3_PORT")) || 110;
      account.retrievSock = parseInt(getenv("MAIL_POP3_SOCK")) || parseInt(getenv("MAIL_SOCK")) || 2;
      account.retrievAuth = parseInt(getenv("MAIL_POP3_AUTH")) || parseInt(getenv("MAIL_AUTH")) || 3;
      account.mode = "pop3";
    }
    if (getenv("MAIL_PASSWORD")) {
      account.password = getenv("MAIL_PASSWORD");
    }
    if (getenv("MAIL_EMAIL_CERT")) {
      account.cert = getenv("MAIL_EMAIL_CERT");
    }
    // add data to mail dict
    mail = [account];
  }

  // utility function to get certificate database
  function getCertDB() {
    // get old interface first
    var certdb = Components.classes["@mozilla.org/security/x509certdb;1"].getService(Components.interfaces.nsIX509CertDB);
    var certdb2 = certdb;
    // try to get new interface if possible
    try {
      certdb2 = Components.classes["@mozilla.org/security/x509certdb;1"].getService(Components.interfaces.nsIX509CertDB2);
    } catch (e) {}
    return certdb2;
  }

  // Add a personal certificate
  function addEmailCert(id, certMail, certPath, certdb) {
    // read from file
    Components.utils.import("resource://gre/modules/FileUtils.jsm");
    var certFile = FileUtils.File(certPath);
    // import to cert db
    certdb.importPKCS12File(certFile, "");
  }

  function configureEmailCert(id, certMail, certs) {
    if ("cert" in certMail) {
      let cert = certs[certMail["email"]];
      idPrefix = "mail.identity.id" + id + ".";
      pref(idPrefix + "sign_mail", true);
      pref(idPrefix + "signing_cert_dbkey", cert.dbKey);
      pref(idPrefix + "signing_cert_name", cert.nickname);
    }
  }

  // Add CA cert
  function addCert(cert, certdb) {
    certdb.addCertFromBase64(cert, "C,C,C", "");
  }

  // Add multiple CA certs
  function addCerts(certs) {
    if (certs) {
      var certdb2 = getCertDB();
      for (var i = 0; i < certs.length; i++) {
        addCert(certs[i], certdb2);
      }
    }
  }

  // read CA certs from files and add them
  // https://stackoverflow.com/a/37682561
  function addCertFiles(certFiles) {
    if (certFiles) {
      certs = []
      var ioService = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
      var scriptableStream = Components.classes["@mozilla.org/scriptableinputstream;1"].getService(Components.interfaces.nsIScriptableInputStream);
      // https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Getting_special_files
      Components.utils.importGlobalProperties(['TextDecoder']);
      Components.utils.import("resource://gre/modules/FileUtils.jsm");
      Components.utils.import("resource://gre/modules/osfile.jsm")
      var BEGIN_CERT = "-----BEGIN CERTIFICATE-----";
      var END_CERT = "-----END CERTIFICATE-----";
      let decoder = new TextDecoder();
      var certdb2 = getCertDB();
      for (var i = 0; i < certFiles.length; i++) {
        let decoder = new TextDecoder();
        let promise = OS.File.read(certFiles[i]).then(
          function onFullfill(array) {
            let certfile = decoder.decode(array);
            certfile = certfile.replace(/[\r\n]/g, "");
            begin = certfile.indexOf(BEGIN_CERT);
            end = certfile.indexOf(END_CERT);
            cert = certfile.substring(begin + BEGIN_CERT.length, end);
            addCert(cert, certdb2);
            return cert;

          },
          function onReject(e) {
            displayError("file", e);
          }
        ).catch(
          function onError(e) {
            displayError("file", e);
          }
        );

      }
    }
  }


  function registerLoginInfo(LoginManager, nsLoginInfo, hostname, formSubmitURL, httpRealm, username, password) {
    //check if login info already exists
    var logins = LoginManager.findLogins({}, hostname, formSubmitURL, httpRealm);
    for (var i = 0; i < logins.length; i++) {
      if (logins[i].username == username) {
        // update password if info exists
        if (logins[i].password != password) {
          var newLoginInfo = new nsLoginInfo(hostname, formSubmitURL, httpRealm, username, password, logins[i].username, logins[i].password);
          LoginManager.modifyLogin(logins[i], newLoginInfo);
        }
        return;
      }
    }
    // if we made it this far there is no matching login info
    var newLoginInfo = new nsLoginInfo(hostname, formSubmitURL, httpRealm, username, password, "", "");
    LoginManager.addLogin(newLoginInfo);
  }

  /**
   * Adding an account requires us to set alot of preferences prefixed with an account id.
   */
  function addAccount(num, account) {
    // identity
    if (account.name)
      pref("mail.identity.id" + num + ".fullName", account.name);
    pref("mail.identity.id" + num + ".useremail", account.email);
    pref("mail.identity.id" + num + ".smtpServer", "smtp" + num);

    // IMAP server settings
    pref("mail.server.server" + num + ".userName", account.user);
    pref("mail.server.server" + num + ".hostname", account.retrievServer);
    pref("mail.server.server" + num + ".name", account.email);
    // Note: Port and socketType (encryption type e.g. ssl/startssl/none) interaction is weird
    // socketType always override port to use the default port for the chosen socketType
    pref("mail.server.server" + num + ".socketType", account.retrievSock);
    pref("mail.server.server" + num + ".authMethod", account.retrievAuth);
    pref("mail.server.server" + num + ".port", account.retrievPort);
    pref("mail.server.server" + num + ".type", account.mode);
    pref("mail.server.server" + num + ".moveOnSpam", true);
    pref("mail.server.server" + num + ".moveTargetMode", 1);

    // folder settings and stuff
    pref("mail.server.server" + num + ".spamActionTargetFolder", account.mode + "://" + account.email + "@" + account.retrievServer + "/Junk");
    pref("mail.server.server" + num + ".trash_folder_name", "Trash");
    pref("mail.server.server" + num + ".archiveMessages", true);
    pref("mail.server.server" + num + ".archiveMessagesDays", 120);
    pref("mail.server.server" + num + ".archiveStarred", true);
    pref("mail.server.server" + num + ".archiveStarredDays", 120);
    pref("mail.server.server" + num + ".archiveTagged", true);
    pref("mail.server.server" + num + ".archiveTaggedDays", 120);

    pref("mail.identity.id" + num + ".draft_folder", account.mode + "://" + account.email + "@" + account.retrievServer + "/Drafts");
    pref("mail.identity.id" + num + ".drafts_folder_picker_mode", "0");
    pref("mail.identity.id" + num + ".fcc_folder", account.mode + "://" + account.email + "@" + account.retrievServer + "/Sent");
    pref("mail.identity.id" + num + ".stationery_folder", account.mode + "://" + account.email + "@" + account.retrievServer + "/Templates");
    pref("mail.identity.id" + num + ".fcc_folder_picker_mode", "0");


    pref("mail.identity.id" + num + ".organization", account.email);
    pref("mail.identity.id" + num + ".overrideGlobal_Pref", true);
    pref("mail.identity.id" + num + ".reply_on_top", 1);
    pref("mail.identity.id" + num + ".sig_bottom", false);
    pref("mail.identity.id" + num + ".sig_on_fwd", true);

    // SMTP server settings
    pref("mail.smtpserver.smtp" + num + ".username", account.user);
    pref("mail.smtpserver.smtp" + num + ".description", account.email + " SMTP");
    pref("mail.smtpserver.smtp" + num + ".hostname", account.smtpServer);
    pref("mail.smtpserver.smtp" + num + ".try_ssl", account.smtpSock);
    pref("mail.smtpserver.smtp" + num + ".authMethod", account.smtpAuth);
    pref("mail.smtpserver.smtp" + num + ".useSecAuth", false);
    pref("mail.smtpserver.smtp" + num + ".port", account.smtpPort);
    pref("mail.identity.id" + num + ".tmpl_folder_picker_mode", "0");

    // Glue it all together
    pref("mail.account.account" + num + ".identities", "id" + num + "");
    pref("mail.account.account" + num + ".server", "server" + num + "");

    // register passwords for the account if they exist
    if (account.password) {
      try {
        // Setup password for the account
        const Cc = Components.classes;
        const Ci = Components.interfaces;
        // get login manager
        const LoginManager = Cc['@mozilla.org/login-manager;1'].getService(Ci.nsILoginManager);
        var nsLoginInfo = new Components.Constructor(
          "@mozilla.org/login-manager/loginInfo;1",
          Components.interfaces.nsILoginInfo,
          "init"
        );
        // create new imap login
        registerLoginInfo(LoginManager, nsLoginInfo, account.mode + "://" + account.retrievServer, null, account.mode + "://" + account.retrievServer, account.email, account.password, '', '');
        // create new smtp login
        registerLoginInfo(LoginManager, nsLoginInfo, "smtp://" + account.smtpServer, null, "smtp://" + account.smtpServer, account.email, account.password, '', '');
      } catch (ex) {
        //will happen if login manager or something like that is missing
      }
    }

    // add signing cert for the account if it exists
    if (account.cert) {
      addEmailCert(num, account.email, account.cert, getCertDB());
    }
  }

  // transform our contact data into a mozilla card
  function contactToCard(contact) {
    // create and fill card with contact info
    var card = Components.classes["@mozilla.org/addressbook/cardproperty;1"].createInstance(Components.interfaces.nsIAbCard);
    for (var key in contact) {
      if (contact.hasOwnProperty(key)) {
        card.setProperty(key, contact[key]);
      }
    }
    return card;
  }

  // to keep it simple just get the first available addressbook
  function getFirstAddressBook() {
    // get address book manager
    var abManager = Components.classes["@mozilla.org/abmanager;1"].getService(Components.interfaces.nsIAbManager);
    var allAddressBooks = abManager.directories;
    // loop address books
    while (allAddressBooks.hasMoreElements()) {
      let addressBook = allAddressBooks.getNext().QueryInterface(Components.interfaces.nsIAbDirectory);
      if (addressBook instanceof Components.interfaces.nsIAbDirectory) { // or nsIAbItem or nsIAbCollection
        // return first address book
        return addressBook;
      }
    }
  }


  function addMailList(addressBook, listInfo) {
    var contacts = listInfo.contacts;
    // create mail list
    var mailList = Components.classes["@mozilla.org/addressbook/directoryproperty;1"].createInstance(Components.interfaces.nsIAbDirectory);
    mailList.isMailList = true;
    // set info
    mailList.dirName = listInfo.name;
    if (listInfo.nickname)
      mailList.listNickName = listInfo.nickname;
    if (listInfo.description)
      mailList.description = listInfo.description;
    // fill with contacts
    for (var i = 0; i < contacts.length; i++) {
      var card = contactToCard(contacts[i]);
      mailList.addressLists.appendElement(card, false);
    }
    addressBook.addMailList(mailList);
  }

  function addMailLists(mailLists) {
    addressBook = getFirstAddressBook();
    for (var i = 0; i < mailLists.length; i++) {
      addMailList(addressBook, mailLists[i]);
    }
  }

  function addContact(addressbook, contact) {
    var card = contactToCard(contact);
    // add card to addressbook
    addressbook.addCard(card);
  }

  function addContacts(contacts) {
    addressBook = getFirstAddressBook();
    for (var i = 0; i < contacts.length; i++) {
      addContact(addressBook, contacts[i]);
    }
  }

  // below is the code starting the data insterts and stuff

  // iterate all loaded mail accounts and create them in thunderbird. credentials are updated if the already exists
  // code below is only run once
  if (!getPref("ait.startup.done")) {
    if (mail) {
      var smtpservers = "";
      var accounts = ""
      for (var i = 1; i <= mail.length; i++) {
        // while looping through the accounts we have to keep track of the number
        // because we need it to set the preferences
        addAccount(i, mail[i - 1]);
        // we make the first account the default
        if (i == 1) {
          accounts += "account" + i;
          smtpservers += "smtp" + i;
          pref("mail.smtp.defaultserver", "smtp" + i);
          pref("mail.accountmanager.defaultaccount", "account" + i);
        } else {
          accounts += ",account" + i;
          smtpservers += ",smtp" + i;
        }

      }
      var certdb = getCertDB();
      var certs = certdb.getCerts();
      var enumerator = certs.getEnumerator();
      var emails = mail.map(m => m.email);
      var email_certs = {};
      while (enumerator.hasMoreElements()) {
        let cert = enumerator.getNext().QueryInterface(Ci.nsIX509Cert);
        if (cert.isBuiltInRoot) {
          continue;
        }
        if (emails.includes(cert.commonName)) {
          email_certs[cert.commonName] = cert;
        }
        if (Object.keys(email_certs).length >= emails.length) {
          break;
        }
      }

      for (var i = 1; i <= mail.length; i++) {
        // while looping through the accounts we have to keep track of the number
        // because we need it to set the preferences
        configureEmailCert(i, mail[i - 1], email_certs);

      }

      if (smtpservers != "") {
        pref("mail.smtpservers", smtpservers);
      }
      if (accounts != "") {
        pref("mail.accountmanager.accounts", accounts);
      }
    }
    if (contacts)
      addContacts(contacts);
    if (mailLists)
      addMailLists(mailLists);
    if (getenv("MAIL_CERT_FILES")) {
      certFiles = JSON.parse(getenv("MAIL_CERT_FILES"));
      addCertFiles(certFiles);
    }
  }
} catch (e) {
  displayError("fail", e);
}
pref("ait.startup.done", true);
